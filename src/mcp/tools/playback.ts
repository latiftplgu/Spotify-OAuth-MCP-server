import { commonSchemas, createSchema } from "../schemas/common";
import { SpotifyService } from "../../spotify";
import { z } from "zod";

export const playbackTools = {
  get_currently_playing: {
    title: "Get Currently Playing Track",
    description: `Get real-time information about what's currently playing in the user's Spotify session.

üéØ USE CASES:
‚Ä¢ Display "Now Playing" information in applications
‚Ä¢ Track listening history and habits in real-time
‚Ä¢ Create social media posts about current music
‚Ä¢ Build music discovery features based on current listening
‚Ä¢ Monitor playback state for automation and smart home integration

üìù WHAT IT RETURNS:
‚Ä¢ Currently playing track with artist and album information
‚Ä¢ Playback progress (current position vs. total duration)
‚Ä¢ Playback state (playing, paused, stopped)
‚Ä¢ Active device information and volume level
‚Ä¢ Shuffle and repeat mode settings
‚Ä¢ Track popularity and explicit content flags

üîç EXAMPLES:
‚Ä¢ "What song is currently playing?"
‚Ä¢ "Show me my current playback status"
‚Ä¢ "Get the current track and how much time is left"
‚Ä¢ "What device am I listening on right now?"

üí° REAL-TIME FEATURES:
‚Ä¢ Updates instantly as tracks change
‚Ä¢ Shows exact playback position down to milliseconds
‚Ä¢ Indicates if user is actively listening or paused
‚Ä¢ Perfect for building live music widgets

‚ö†Ô∏è REQUIREMENTS:
‚Ä¢ Valid Spotify access token with user-read-playback-state scope
‚Ä¢ User must have an active Spotify session`,
    schema: createSchema({
      token: commonSchemas.token(),
    }),
    handler: async (args: any, spotifyService: SpotifyService) => {
      const { token } = args;
      return await spotifyService.getCurrentPlayback(token);
    },
  },

  start_playback: {
    title: "Start Music Playback",
    description: `Initiate music playback with specific tracks, albums, playlists, or artist collections.

üéØ USE CASES:
‚Ä¢ Start playing music when users enter smart spaces
‚Ä¢ Create voice-activated music requests
‚Ä¢ Build custom music controllers and interfaces
‚Ä¢ Implement mood-based automatic music selection
‚Ä¢ Start themed playlists for events, workouts, or activities

üìù WHAT IT RETURNS:
‚Ä¢ Confirmation of playback initiation
‚Ä¢ Current track information and playback state
‚Ä¢ Device information where playback started
‚Ä¢ Error details if playback couldn't start
‚Ä¢ Queue information showing what will play next

üîç EXAMPLES:
‚Ä¢ "Play my Discover Weekly playlist"
‚Ä¢ "Start playing the album 'Abbey Road'"
‚Ä¢ "Play tracks by The Beatles on my laptop"
‚Ä¢ "Begin playback of my liked songs"

üéµ PLAYBACK OPTIONS:
‚Ä¢ contextUri: Play entire albums, playlists, or artist catalogs
‚Ä¢ trackUris: Play specific individual tracks in order
‚Ä¢ deviceId: Choose which device should start playing
‚Ä¢ Can resume from where you left off or start fresh

‚ö†Ô∏è REQUIREMENTS:
‚Ä¢ Valid Spotify access token with user-modify-playback-state scope
‚Ä¢ User must have an active Spotify device available
‚Ä¢ Content must be available in user's market`,
    schema: createSchema({
      token: commonSchemas.token(),
      contextUri: z
        .string()
        .optional()
        .describe("Spotify context URI (album, playlist, artist) to play"),
      trackUris: z
        .array(z.string())
        .optional()
        .describe("Array of specific track URIs to play"),
      deviceId: commonSchemas.deviceId(),
    }),
    handler: async (args: any, spotifyService: SpotifyService) => {
      const { token, contextUri, trackUris, deviceId } = args;
      return await spotifyService.playMusic(
        token,
        trackUris,
        contextUri,
        deviceId
      );
    },
  },

  resume_player: {
    title: "Resume Player",
    description: `Resume paused playback or continue playing from where the user left off.

üéØ USE CASES:
‚Ä¢ Resume music after phone calls or interruptions
‚Ä¢ Continue playback when returning to apps or devices
‚Ä¢ Implement "play/pause" toggle functionality
‚Ä¢ Resume listening after switching between devices
‚Ä¢ Restore playback state in smart home automations

üìù WHAT IT RETURNS:
‚Ä¢ Confirmation of resumed playback
‚Ä¢ Current track and position information
‚Ä¢ Updated playback state showing active play
‚Ä¢ Device information where playback resumed
‚Ä¢ Remaining track duration and queue preview

üîç EXAMPLES:
‚Ä¢ "Resume my music where I left off"
‚Ä¢ "Continue playing on my phone"
‚Ä¢ "Resume the playlist I was listening to"
‚Ä¢ "Start playing again on my smart speaker"

üí° SMART RESUME:
‚Ä¢ Picks up exactly where playback was paused
‚Ä¢ Maintains queue order and shuffle settings
‚Ä¢ Preserves repeat mode and volume level
‚Ä¢ Can resume on the same or different device

‚ö†Ô∏è REQUIREMENTS:
‚Ä¢ Valid Spotify access token with user-modify-playback-state scope
‚Ä¢ Previous playback session must exist to resume
‚Ä¢ Target device must be available and active`,
    schema: createSchema({
      token: commonSchemas.token(),
      contextUri: z
        .string()
        .optional()
        .describe("Spotify context URI (album, playlist, artist) to play"),
      trackUris: z
        .array(z.string())
        .optional()
        .describe("Array of track URIs to play"),
      deviceId: commonSchemas.deviceId(),
    }),
    handler: async (args: any, spotifyService: SpotifyService) => {
      const { token, contextUri, trackUris, deviceId } = args;
      return await spotifyService.resumePlayback(
        token,
        contextUri,
        trackUris,
        deviceId
      );
    },
  },

  pause_player: {
    title: "Pause Player",
    description: `Pause the current music playback while maintaining position and queue state.

üéØ USE CASES:
‚Ä¢ Pause music during calls, meetings, or conversations
‚Ä¢ Create automatic pause triggers for smart home systems
‚Ä¢ Implement voice commands for hands-free control
‚Ä¢ Pause playback when leaving designated areas
‚Ä¢ Build custom music control interfaces with pause functionality

üìù WHAT IT RETURNS:
‚Ä¢ Confirmation of successful pause operation
‚Ä¢ Final playback position before pausing
‚Ä¢ Current track information preserved for resume
‚Ä¢ Device state showing paused status
‚Ä¢ Queue information maintained for later resume

üîç EXAMPLES:
‚Ä¢ "Pause my music"
‚Ä¢ "Stop playing on my bedroom speaker"
‚Ä¢ "Pause the current track"
‚Ä¢ "Hold the music for a moment"

üí° PAUSE BENEFITS:
‚Ä¢ Preserves exact playback position for seamless resume
‚Ä¢ Maintains queue, shuffle, and repeat settings
‚Ä¢ Keeps track information available for display
‚Ä¢ Allows for quick resume without losing context

‚ö†Ô∏è REQUIREMENTS:
‚Ä¢ Valid Spotify access token with user-modify-playback-state scope
‚Ä¢ Active playback session must be running
‚Ä¢ User must have appropriate device permissions`,
    schema: createSchema({
      token: commonSchemas.token(),
      deviceId: commonSchemas.deviceId(),
    }),
    handler: async (args: any, spotifyService: SpotifyService) => {
      const { token, deviceId } = args;
      return await spotifyService.pausePlayback(token, deviceId);
    },
  },

  skip_to_next: {
    title: "Skip to Next Track",
    description: `Skip to the next track in the user's playback queue or playlist.

üéØ USE CASES:
‚Ä¢ Skip songs that don't match current mood or activity
‚Ä¢ Navigate through playlists and albums quickly
‚Ä¢ Build custom music control interfaces
‚Ä¢ Create voice-activated skip commands
‚Ä¢ Implement automatic skipping based on user preferences

üìù WHAT IT RETURNS:
‚Ä¢ Information about the new track that started playing
‚Ä¢ Updated playback position reset to beginning
‚Ä¢ Queue information showing remaining tracks
‚Ä¢ Confirmation of successful skip operation
‚Ä¢ Device state with new playback status

üîç EXAMPLES:
‚Ä¢ "Skip to the next song"
‚Ä¢ "Play the next track in this playlist"
‚Ä¢ "Move forward to the next song"
‚Ä¢ "I don't like this song, skip it"

üéµ SKIP BEHAVIOR:
‚Ä¢ Follows playlist/album order when not shuffled
‚Ä¢ Respects shuffle mode for random progression
‚Ä¢ May trigger repeat behavior at end of playlists
‚Ä¢ Updates listening history and statistics
‚Ä¢ Can trigger discovery algorithms for similar music

‚ö†Ô∏è REQUIREMENTS:
‚Ä¢ Valid Spotify access token with user-modify-playback-state scope
‚Ä¢ Active playback session with available next track
‚Ä¢ User must have appropriate device control permissions`,
    schema: createSchema({
      token: commonSchemas.token(),
      deviceId: commonSchemas.deviceId(),
    }),
    handler: async (args: any, spotifyService: SpotifyService) => {
      const { token, deviceId } = args;
      return await spotifyService.skipToNext(token, deviceId);
    },
  },

  skip_to_previous: {
    title: "Skip to Previous Track",
    description: `Skip to the previous track or restart the current track from the beginning.

üéØ USE CASES:
‚Ä¢ Go back to replay favorite parts of songs
‚Ä¢ Navigate backwards through playlists or albums
‚Ä¢ Correct accidental skips to next track
‚Ä¢ Replay tracks that were particularly enjoyable
‚Ä¢ Build comprehensive playback control systems

üìù WHAT IT RETURNS:
‚Ä¢ Information about the track that started playing
‚Ä¢ Playback position reset to beginning of track
‚Ä¢ Updated queue and playback state information
‚Ä¢ Confirmation of successful skip operation
‚Ä¢ Device status with new playback details

üîç EXAMPLES:
‚Ä¢ "Go back to the previous song"
‚Ä¢ "Play that last track again"
‚Ä¢ "Skip back to the song before this one"
‚Ä¢ "I want to hear that again"

üéµ SKIP BEHAVIOR:
‚Ä¢ Restarts current track if more than 3 seconds have played
‚Ä¢ Goes to actual previous track if within first 3 seconds
‚Ä¢ Follows reverse playlist/album order
‚Ä¢ Respects shuffle mode for random navigation
‚Ä¢ Updates position in listening history

‚ö†Ô∏è REQUIREMENTS:
‚Ä¢ Valid Spotify access token with user-modify-playback-state scope
‚Ä¢ Active playback session currently running
‚Ä¢ Previous track must exist in queue or history`,
    schema: createSchema({
      token: commonSchemas.token(),
      deviceId: commonSchemas.deviceId(),
    }),
    handler: async (args: any, spotifyService: SpotifyService) => {
      const { token, deviceId } = args;
      return await spotifyService.skipToPrevious(token, deviceId);
    },
  },

  set_volume: {
    title: "Set Player Volume",
    description: `Adjust the volume level for the user's active Spotify device.

üéØ USE CASES:
‚Ä¢ Create dynamic volume adjustments for different times of day
‚Ä¢ Build smart home automation with volume control
‚Ä¢ Implement voice commands for hands-free volume changes
‚Ä¢ Adjust volume based on ambient noise levels
‚Ä¢ Create custom audio experience controls

üìù WHAT IT RETURNS:
‚Ä¢ Confirmation of successful volume change
‚Ä¢ Current volume level after adjustment
‚Ä¢ Device information showing updated state
‚Ä¢ Previous volume level for potential undo functionality
‚Ä¢ Playback state with new volume settings

üîç EXAMPLES:
‚Ä¢ "Set volume to 50%"
‚Ä¢ "Lower the volume to 25"
‚Ä¢ "Turn up the music to 80%"
‚Ä¢ "Make it quieter, set to 15%"

üîä VOLUME CONTROL:
‚Ä¢ Range: 0-100 percent
‚Ä¢ 0 = Complete silence (muted)
‚Ä¢ 100 = Maximum device volume
‚Ä¢ Changes apply instantly during playback
‚Ä¢ Preserves volume setting for future sessions

‚ö†Ô∏è REQUIREMENTS:
‚Ä¢ Valid Spotify access token with user-modify-playback-state scope
‚Ä¢ Active device that supports volume control
‚Ä¢ Device must be currently available and responsive`,
    schema: createSchema({
      token: commonSchemas.token(),
      volumePercent: commonSchemas.volumePercent(),
      deviceId: commonSchemas.deviceId(),
    }),
    handler: async (args: any, spotifyService: SpotifyService) => {
      const { token, volumePercent, deviceId } = args;
      return await spotifyService.setVolume(token, volumePercent, deviceId);
    },
  },

  add_to_queue: {
    title: "Add Song to Queue",
    description: `Add a specific track to the user's playback queue for immediate or upcoming playback.

üéØ USE CASES:
‚Ä¢ Queue up requested songs during parties or events
‚Ä¢ Build dynamic playlists on-the-fly based on mood
‚Ä¢ Add discovery tracks without interrupting current playlist
‚Ä¢ Create collaborative queuing for shared listening sessions
‚Ä¢ Implement "play this next" functionality

üìù WHAT IT RETURNS:
‚Ä¢ Confirmation that track was added to queue
‚Ä¢ Position of track in the upcoming queue
‚Ä¢ Estimated time until track will play
‚Ä¢ Current queue length and upcoming tracks preview
‚Ä¢ Track information that was successfully queued

üîç EXAMPLES:
‚Ä¢ "Add 'Bohemian Rhapsody' to my queue"
‚Ä¢ "Queue up the track spotify:track:4uLU6hMCjMI75M1A2tKUQC"
‚Ä¢ "Add this song to play next"
‚Ä¢ "Put 'Sweet Child O Mine' in my queue"

üéµ QUEUE BEHAVIOR:
‚Ä¢ Tracks play in the order they were added
‚Ä¢ Queue plays after current track/playlist ends
‚Ä¢ Maintains queue across device switches
‚Ä¢ Can add multiple tracks for extended queuing
‚Ä¢ Integrates with existing shuffle and repeat settings

‚ö†Ô∏è REQUIREMENTS:
‚Ä¢ Valid Spotify access token with user-modify-playback-state scope
‚Ä¢ Track must be available in user's market
‚Ä¢ Active playback session or available device required`,
    schema: createSchema({
      token: commonSchemas.token(),
      trackUri: z
        .string()
        .describe(
          "Spotify track URI (e.g., 'spotify:track:4uLU6hMCjMI75M1A2tKUQC')"
        ),
      deviceId: commonSchemas.deviceId(),
    }),
    handler: async (args: any, spotifyService: SpotifyService) => {
      const { token, trackUri, deviceId } = args;
      return await spotifyService.addToQueue(token, trackUri, deviceId);
    },
  },

  get_devices: {
    title: "Get User Devices",
    description: `Retrieve all available Spotify-connected devices for the user's account.

üéØ USE CASES:
‚Ä¢ Display device options for playback targeting
‚Ä¢ Build device management and control interfaces
‚Ä¢ Check which devices are currently online and available
‚Ä¢ Monitor device battery levels and connection status
‚Ä¢ Create smart home integrations with Spotify-enabled devices

üìù WHAT IT RETURNS:
‚Ä¢ Complete list of user's connected devices
‚Ä¢ Device names, types, and unique identifiers
‚Ä¢ Current active state and availability status
‚Ä¢ Volume levels and playback capabilities
‚Ä¢ Device restrictions and supported features

üîç EXAMPLES:
‚Ä¢ "Show me all my Spotify devices"
‚Ä¢ "What devices can I play music on?"
‚Ä¢ "List my available speakers and phones"
‚Ä¢ "Which devices are currently online?"

üîß DEVICE TYPES:
‚Ä¢ Computer (desktop/laptop applications)
‚Ä¢ Smartphone (mobile apps)
‚Ä¢ Speaker (smart speakers, soundbars)
‚Ä¢ TV (smart TVs, streaming devices)
‚Ä¢ Car (automotive systems)
‚Ä¢ Game Console (PlayStation, Xbox)

üí° DEVICE MANAGEMENT:
‚Ä¢ Shows real-time availability status
‚Ä¢ Indicates which device is currently active
‚Ä¢ Displays volume control capabilities
‚Ä¢ Shows device-specific restrictions
‚Ä¢ Perfect for building device selector UIs

‚ö†Ô∏è REQUIREMENTS:
‚Ä¢ Valid Spotify access token with user-read-playback-state scope
‚Ä¢ At least one Spotify-enabled device must be logged in`,
    schema: createSchema({
      token: commonSchemas.token(),
    }),
    handler: async (args: any, spotifyService: SpotifyService) => {
      const { token } = args;
      return await spotifyService.getUserDevices(token);
    },
  },

  transfer_playback: {
    title: "Transfer Playback",
    description: `Seamlessly transfer active playback from one device to another while maintaining playback state.

üéØ USE CASES:
‚Ä¢ Move music from phone to home speakers when arriving home
‚Ä¢ Switch from desktop to phone when leaving office
‚Ä¢ Transfer playback to car system when starting drive
‚Ä¢ Move music between rooms using different smart speakers
‚Ä¢ Continue listening on different devices without interruption

üìù WHAT IT RETURNS:
‚Ä¢ Confirmation of successful transfer
‚Ä¢ New active device information
‚Ä¢ Preserved playback position and queue
‚Ä¢ Current track information on new device
‚Ä¢ Transfer success status and any error details

üîç EXAMPLES:
‚Ä¢ "Transfer playback to my bedroom speaker"
‚Ä¢ "Move music to my phone"
‚Ä¢ "Switch playback to device ID: 1a2b3c4d5e6f"
‚Ä¢ "Continue playing on my laptop"

üîÑ TRANSFER FEATURES:
‚Ä¢ Maintains exact playback position
‚Ä¢ Preserves queue, shuffle, and repeat settings
‚Ä¢ Keeps volume level appropriate for target device
‚Ä¢ Option to start playing immediately or stay paused
‚Ä¢ Seamless transition with minimal interruption

üí° SMART HANDOFFS:
‚Ä¢ Perfect for multi-room audio setups
‚Ä¢ Enables mobility without losing music context
‚Ä¢ Great for smart home automation scenarios
‚Ä¢ Supports lifestyle-based listening patterns

‚ö†Ô∏è REQUIREMENTS:
‚Ä¢ Valid Spotify access token with user-modify-playback-state scope
‚Ä¢ Target device must be available and online
‚Ä¢ User must have control permissions for target device`,
    schema: createSchema({
      token: commonSchemas.token(),
      deviceId: z
        .string()
        .describe("The ID of the device to transfer playback to"),
      play: z
        .boolean()
        .default(false)
        .describe("Whether to start playing immediately after transfer"),
    }),
    handler: async (args: any, spotifyService: SpotifyService) => {
      const { token, deviceId, play = false } = args;
      return await spotifyService.transferPlayback(token, deviceId, play);
    },
  },
};
